{"version":3,"sources":["CurrencyRow.js","App.js","index.js"],"names":["CurrencyRow","props","currencyOptions","selectedCurrency","onChangeCurrency","amount","onChangeAmount","type","className","value","onChange","map","option","BASE_URL","App","toAmount","fromAmount","useState","setCurrencyOptions","fromCurrency","setFromCurrency","toCurrency","setToCurrency","exchangeRate","setExchangeRate","setAmount","amountInFromCurrency","setamountInFromCurrency","useEffect","fetch","then","res","json","data","firstCurrency","Object","keys","rates","base","e","target","ReactDOM","render","document","getElementById"],"mappings":"+NAEe,SAASA,EAAYC,GAAQ,IAGpCC,EAKCD,EALDC,gBACAC,EAICF,EAJDE,iBACAC,EAGCH,EAHDG,iBACAC,EAECJ,EAFDI,OACAC,EACCL,EADDK,eAEJ,OACI,gCACI,uBAAOC,KAAK,SAASC,UAAU,QAAQC,MAAQJ,EAAQK,SAAYJ,IAEnE,wBAAQG,MAAON,EAAkBO,SAAYN,EAA7C,SACMF,EAAgBS,KAAI,SAAAC,GAAM,OACxB,wBAAqBH,MAAOG,EAA5B,SAAqCA,GAAxBA,WCZjC,IAAMC,EAAW,yCAkGFC,MAhGf,WAAc,IAoBNC,EAAUC,EApBJ,EAGoCC,mBAAS,IAH7C,mBAGHf,EAHG,KAGcgB,EAHd,OAM8BD,qBAN9B,mBAMHE,EANG,KAMWC,EANX,OAS0BH,qBAT1B,mBASHI,EATG,KASSC,EATT,OAY8BL,qBAZ9B,mBAYHM,EAZG,KAYWC,EAZX,OAckBP,mBAAS,GAd3B,mBAcHZ,EAdG,KAcKoB,EAdL,OAiB8CR,oBAAS,GAjBvD,mBAiBHS,EAjBG,KAiBmBC,EAjBnB,KAqEV,OAhDID,GACAV,EAAaX,EACbU,EAAWV,EAASkB,IAIpBR,EAAWV,EACXW,EAAaX,EAASkB,GAM1BK,qBAAU,WACNC,MAAMhB,GACDiB,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GAEF,IAAMC,EAAgBC,OAAOC,KAAKH,EAAKI,OAAO,GAC9CnB,EAAmB,CAACe,EAAKK,MAAP,mBAAgBH,OAAOC,KAAKH,EAAKI,UACnDjB,EAAgBa,EAAKK,MACrBhB,EAAcY,GACdV,EAAgBS,EAAKI,MAAMH,SAEpC,IAIHN,qBAAU,WACc,MAAhBT,GAAqC,MAAbE,GACxBQ,MAAM,GAAD,OAAIhB,EAAJ,iBAAqBM,EAArB,oBAA6CE,IACjDS,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GAAI,OAAIT,EAAgBS,EAAKI,MAAMhB,SAE9C,CAACF,EAAcE,IAgBd,cADA,CACA,sBACI,gEAAkC,uBAAlC,6BAEA,cAACrB,EAAD,CACIE,gBAAmBA,EACnBC,iBAAoBgB,EAGpBf,iBAAoB,SAAAmC,GAAC,OAAInB,EAAgBmB,EAAEC,OAAO/B,QAClDJ,OAAUW,EACVV,eArBZ,SAAgCiC,GAC5Bd,EAAUc,EAAEC,OAAO/B,OACnBkB,GAAwB,MAqBpB,qBAAKnB,UAAU,SAAf,eACA,cAACR,EAAD,CACIE,gBAAmBA,EACnBC,iBAAoBkB,EACpBjB,iBAAoB,SAAAmC,GAAC,OAAIjB,EAAciB,EAAEC,OAAO/B,QAChDH,eAvBZ,SAA8BiC,GAC1Bd,EAAUc,EAAEC,OAAO/B,OACnBkB,GAAwB,IAsBhBtB,OAAUU,IAEd,4BAAG,0DC9Ff0B,IAASC,OAAO,cAAC,EAAD,IAAQC,SAASC,eAAe,W","file":"static/js/main.633d346f.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport default function CurrencyRow(props) {\r\n\r\n    const { \r\n        currencyOptions,\r\n        selectedCurrency,\r\n        onChangeCurrency,\r\n        amount,\r\n        onChangeAmount\r\n     } = props\r\n    return (\r\n        <div>\r\n            <input type=\"number\" className=\"input\" value ={amount} onChange = {onChangeAmount}/>\r\n\r\n            <select value={selectedCurrency} onChange = {onChangeCurrency}>\r\n                { currencyOptions.map(option => (\r\n                    <option key={option} value={option}>{option}</option>\r\n                ))}\r\n            </select>\r\n        </div>\r\n    )\r\n}\r\n","import React , {useEffect, useState} from 'react';\r\nimport './App.css';\r\nimport CurrencyRow from './CurrencyRow'\r\n\r\n//API for latest currency conversion rates\r\nconst BASE_URL = \"https://api.exchangeratesapi.io/latest\"\r\n\r\nfunction App(){\r\n\r\n    //useState for currency options\r\n    const [currencyOptions, setCurrencyOptions] = useState([])\r\n    \r\n    //to set the default currency in option\r\n    const [fromCurrency, setFromCurrency] = useState()\r\n    \r\n    //set the exchange default currency\r\n    const [toCurrency, setToCurrency] = useState()\r\n\r\n    //to get the exchange rate\r\n    const [exchangeRate, setExchangeRate] = useState()\r\n    //setting the default amount\r\n    const [amount, setAmount] = useState(1)\r\n\r\n    //Is it the amount that changed from first box or second box\r\n    const [amountInFromCurrency, setamountInFromCurrency] = useState(true)\r\n   \r\n    //automatically gets the exchange rae amount\r\n    let toAmount, fromAmount\r\n    if (amountInFromCurrency) {\r\n        fromAmount = amount\r\n        toAmount = amount * exchangeRate\r\n        \r\n    }\r\n    else{\r\n        toAmount = amount\r\n        fromAmount = amount / exchangeRate\r\n    }\r\n\r\n\r\n    // We want to fetch the api everytime we load the application, so we use useEffect()\r\n    //In useeffect, first parameter will empty function and 2nd will be an empty array, will only called once \r\n    useEffect(()=> {\r\n        fetch(BASE_URL) //fetch the url \r\n            .then(res => res.json())   //convert response to json\r\n            .then(data => {\r\n\r\n                const firstCurrency = Object.keys(data.rates)[0]\r\n                setCurrencyOptions([data.base, ...Object.keys(data.rates)])\r\n                setFromCurrency(data.base)   //set currency from the base in the json\r\n                setToCurrency(firstCurrency)\r\n                setExchangeRate(data.rates[firstCurrency])\r\n            })\r\n    }, [])\r\n\r\n    //If we want to update the exchange rate by selecting or changing the currency value\r\n    //then we have to make another useEffect.\r\n    useEffect(() =>{\r\n        if (fromCurrency != null && toCurrency !=null) {\r\n            fetch(`${BASE_URL}?base=${fromCurrency}&symbols=${toCurrency}`)\r\n            .then(res => res.json()) \r\n            .then(data => setExchangeRate(data.rates[toCurrency]))\r\n        }\r\n    }, [fromCurrency, toCurrency])\r\n\r\n\r\n\r\n\r\n    function handleFromAmountChange(e){\r\n        setAmount(e.target.value)\r\n        setamountInFromCurrency(true)\r\n    }\r\n\r\n    function handleToAmountChange(e){\r\n        setAmount(e.target.value)\r\n        setamountInFromCurrency(false)\r\n    }\r\n    return(\r\n        // wrap in fragments, empty elements will return the javascrip \r\n        <>\r\n            <h1>Convert your currency through <br/>latest conversion rates\r\n            </h1>\r\n            <CurrencyRow\r\n                currencyOptions = {currencyOptions}\r\n                selectedCurrency = {fromCurrency}\r\n\r\n                //setting the target onchange currently\r\n                onChangeCurrency = {e => setFromCurrency(e.target.value)}\r\n                amount = {fromAmount}\r\n                onChangeAmount = {handleFromAmountChange}\r\n            />\r\n            <div className=\"equals\">=</div>\r\n            <CurrencyRow\r\n                currencyOptions = {currencyOptions}\r\n                selectedCurrency = {toCurrency}\r\n                onChangeCurrency = {e => setToCurrency(e.target.value)}\r\n                onChangeAmount = {handleToAmountChange}\r\n                amount = {toAmount}\r\n            />\r\n            <p><i>Made by Harsh Patel</i></p>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />,document.getElementById('root'));\n"],"sourceRoot":""}